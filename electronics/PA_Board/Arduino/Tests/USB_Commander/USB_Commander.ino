/*Commander example - basic
 * Demonstrating commands to get and set an int and a float
 */
#include <Commander.h>
#include <Adafruit_DotStar.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_INA219.h>
#include <Adafruit_MCP4725.h>
#include <Temperature_LM75_Derived.h>

#define VGG_EN_PIN 10  // Vgg Enable Pin
#define VGG_MINIMUM 4095
#define VGG_MAXIMUM 0
#define TX_RELAY_PIN 5
#define VGG_MIN_VOLTS 2.0f
#define VGG_MAX_VOLTS 5.85f
#define VGG_SPAN_VOLTS (VGG_MAX_VOLTS - VGG_MIN_VOLTS)

Commander cmd;
Adafruit_MCP4725 dac;
Adafruit_INA219 ina219;
Generic_LM75_12Bit temperature(&Wire2);
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire1, OLED_RESET);


//Variables we can set or get
int myInt = 0;
float myFloat = 0.0;

Adafruit_DotStar strip = Adafruit_DotStar(DOTSTAR_NUM, PIN_DOTSTAR_DATA, PIN_DOTSTAR_CLK, DOTSTAR_BGR);

uint8_t Dotstar_Colours[3] = { 64, 0, 0 };
bool LED_state = false;
bool TX_state = false;
bool VGG_state = false;
uint16_t DAC_value;

#define RADARC_LOGO_HEIGHT   44
#define RADARC_LOGO_WIDTH    68

  // 'RADARC68x44', 68x44px
const unsigned char RADARC68x44 [] PROGMEM = {
	0xfc, 0x00, 0x03, 0xff, 0xbf, 0xfc, 0x00, 0x03, 0xf0, 0xfc, 0x00, 0x00, 0x7f, 0x6f, 0xe0, 0x00, 
	0x03, 0xf0, 0xff, 0xff, 0xf8, 0x1f, 0x6f, 0x81, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0x0f, 0x5f, 
	0x0f, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0x8f, 0x6f, 0x1f, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 
	0xc7, 0xee, 0x3f, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xc7, 0xfe, 0x3f, 0xff, 0xff, 0xf0, 0xff, 
	0xff, 0xff, 0xcf, 0xff, 0x3f, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0x8f, 0xbf, 0x1f, 0xff, 0xff, 
	0xf0, 0xff, 0xff, 0xfe, 0x1f, 0x9f, 0x87, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xe0, 0x3f, 0x5f, 0xc0, 
	0x7f, 0xff, 0xf0, 0xff, 0xe7, 0xe0, 0x7f, 0x0f, 0xe0, 0x7e, 0x7f, 0xf0, 0xff, 0xdb, 0xe0, 0x3f, 
	0x6f, 0xc0, 0x7d, 0xbf, 0xf0, 0xff, 0xbd, 0xfe, 0x1f, 0xff, 0x87, 0xfb, 0xdf, 0xf0, 0xff, 0xbd, 
	0xff, 0x8f, 0xff, 0x1f, 0xfb, 0xdf, 0xf0, 0xff, 0xbd, 0xff, 0xcf, 0xff, 0x3f, 0xfb, 0xdf, 0xf0, 
	0xff, 0x7e, 0xff, 0xc7, 0x4e, 0x3f, 0xf7, 0xef, 0xf0, 0xff, 0x7e, 0xff, 0xc7, 0x6e, 0x3f, 0xf7, 
	0xef, 0xf0, 0xff, 0x7e, 0xff, 0xcf, 0x6f, 0x3f, 0xf7, 0xef, 0xf0, 0xff, 0x7e, 0xff, 0x0f, 0x6f, 
	0x0f, 0xf7, 0xef, 0xf0, 0xff, 0x7e, 0xfc, 0x1f, 0x1f, 0x83, 0xf7, 0xef, 0xf0, 0xff, 0x7e, 0xc0, 
	0x7f, 0xff, 0xe0, 0x37, 0xef, 0xf0, 0xff, 0x7e, 0xe0, 0x7f, 0xff, 0xe0, 0x77, 0xef, 0xf0, 0x7f, 
	0x7f, 0xf8, 0x1f, 0xbf, 0x81, 0xff, 0xef, 0xe0, 0x7f, 0x7f, 0xff, 0x0f, 0x9f, 0x0f, 0xff, 0xef, 
	0xe0, 0x7f, 0x7f, 0xff, 0xcf, 0x5f, 0x3f, 0xff, 0xef, 0xe0, 0x7f, 0xff, 0xff, 0xc7, 0x0e, 0x3f, 
	0xff, 0xff, 0xe0, 0x7e, 0xff, 0xff, 0xc7, 0x6e, 0x3f, 0xff, 0xf7, 0xe0, 0x7e, 0xff, 0xff, 0xcf, 
	0xff, 0x3f, 0xff, 0xf7, 0xe0, 0xfe, 0xff, 0xff, 0x8f, 0xff, 0x1f, 0xff, 0xf7, 0xf0, 0xbe, 0xff, 
	0xfe, 0x1f, 0xff, 0x87, 0xff, 0xf7, 0xd0, 0xbe, 0xff, 0xe0, 0x3f, 0x0f, 0xc0, 0x7f, 0xf7, 0xd0, 
	0xbd, 0xff, 0xe0, 0x7f, 0x6f, 0xe0, 0x7f, 0xfb, 0xd0, 0xdd, 0xff, 0xe0, 0x3f, 0x1f, 0xc0, 0x7f, 
	0xfb, 0xb0, 0xeb, 0xff, 0xfe, 0x1f, 0x4f, 0x87, 0xff, 0xfd, 0x70, 0xff, 0xff, 0xff, 0x8f, 0x6f, 
	0x1f, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xcf, 0xff, 0x3f, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 
	0xc7, 0xfe, 0x3f, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xc7, 0x9e, 0x3f, 0xff, 0xff, 0xf0, 0xff, 
	0xff, 0xff, 0x8f, 0x6f, 0x1f, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0x0f, 0x7f, 0x0f, 0xff, 0xff, 
	0xf0, 0xff, 0xff, 0xf8, 0x1f, 0x6f, 0x81, 0xff, 0xff, 0xf0, 0xfc, 0x00, 0x00, 0x7f, 0x2f, 0xe0, 
	0x00, 0x03, 0xf0, 0xfc, 0x00, 0x03, 0xff, 0xff, 0xfc, 0x00, 0x03, 0xf0
};


String deviceInfo = "RADARC Pi Transceiver PA BOARD USB Commander";

void oled_update(void){
 
// Clear the buffer
  display.clearDisplay();
  display.setTextSize(1); 
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println("RADARC Pi Transceiver");
  display.setCursor(42, 9);
  display.println("PA Board");
  display.setCursor(0,18);
  display.print("Status: ");
  if(TX_state == true) display.println("Transmit");
  else display.println("Receive");
  display.setCursor(0,27);
  display.print("Temp:");
  display.print(temperature.readTemperatureC(),1);
  display.println(" deg C");
  display.setCursor(0,36);
  display.print("Vdd:");
  display.print(ina219.getBusVoltage_V(),2 );
  display.print("V ");
  display.print("Vgg:");
  display.print( analogRead(2) * ( (5.7 * 3.3) / 4095.0) , 2 );
  display.println("V");
  display.setCursor(0,45);
  display.print("Idd:");
  display.print(ina219.getShuntVoltage_mV() /10,2 );
  display.println("A");
  display.setCursor(0,54);
  display.print("Fwd:");
  display.print(analogRead(0) * 3.3 / 4095.0,1 );
  display.print("W ");
  display.print("Rev: ");
  display.print( analogRead(1) * 3.3 / 4095.0 , 1 );
  display.println("W");
  display.display();


}

//SETUP ---------------------------------------------------------------------------
void setup() {
  Serial.begin(115200);
  Wire2.begin();  // Internal I2C Bus
  strip.begin();
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, LOW);
  strip.setPixelColor(0, Dotstar_Colours[0], Dotstar_Colours[1], Dotstar_Colours[2]);
  strip.show();

  pinMode(VGG_EN_PIN, OUTPUT);
  digitalWrite(VGG_EN_PIN, LOW);

  pinMode(TX_RELAY_PIN, OUTPUT);
  digitalWrite(TX_RELAY_PIN, LOW);

  dac.begin(0x61, &Wire2);
  dac.setVoltage(VGG_MINIMUM, false);
  DAC_value = VGG_MINIMUM;

  ina219.begin(&Wire2);

  analogReadResolution(ADC_RESOLUTION);  // set ADC resolution to 12 bits
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }

  display.clearDisplay();

  display.setTextSize(1); 
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println("RADARC Pi Transceiver");
  display.setCursor(42, 9);
  display.println("PA Board");
  display.drawBitmap(
    (display.width()  - RADARC_LOGO_WIDTH ) / 2, 19,
    RADARC68x44, RADARC_LOGO_WIDTH, RADARC_LOGO_HEIGHT, 1);    
  display.display();
  delay(4000); // Pause for 4 seconds

  initialiseCommander();
  while (!Serial) { ; }
  cmd.printUserString();
  cmd.println();
  Serial.println("Type 'help' to get help");
  cmd.printCommandPrompt();
}

//MAIN LOOP ---------------------------------------------------------------------------
void loop() {
  cmd.update();
  oled_update();
  delay(100);
}
